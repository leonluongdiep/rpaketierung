# Installiere notwendige Pakete, falls noch nicht vorhanden
if (!requireNamespace("rvest", quietly = TRUE)) {
  install.packages("rvest")
}

if (!requireNamespace("htmlTable", quietly = TRUE)) {
  install.packages("htmlTable")
}

library(rvest)
library(htmlTable)

# Verzeichnisse für den Download der Pakete setzen
base_dir <- "C:/rpaketierung/20240801"
init_dir <- file.path(base_dir, "downloaded_initpackages")
requires_dir <- file.path(base_dir, "downloaded_requirespackages")
logs_dir <- file.path(base_dir, "download_logs")
dir.create(init_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(requires_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(logs_dir, recursive = TRUE, showWarnings = FALSE)

# Lade die Paketliste aus der CSV-Datei
paketliste_file <- file.path(base_dir, "rpaketliste.csv")
pakete <- read.csv(paketliste_file, stringsAsFactors = FALSE)$Paketname

# Funktion zum Extrahieren der Paketinformationen von der CRAN-Seite
get_cran_package_info <- function(package_name) {
  url <- paste0("https://cran.r-project.org/package=", package_name)
  webpage <- read_html(url)
  
  # Extrahiere die notwendigen Informationen
  version <- webpage %>% html_nodes(xpath = '//td[contains(., "Version:")]/following-sibling::td') %>% html_text(trim = TRUE)
  author <- webpage %>% html_nodes(xpath = '//td[contains(., "Author:")]/following-sibling::td') %>% html_text(trim = TRUE)
  published <- webpage %>% html_nodes(xpath = '//td[contains(., "Published:")]/following-sibling::td') %>% html_text(trim = TRUE)
  license <- webpage %>% html_nodes(xpath = '//td[contains(., "License:")]/following-sibling::td') %>% html_text(trim = TRUE)
  url <- paste0("https://cran.r-project.org/package=", package_name)  # Direkter Link zur CRAN-Seite
  
  list(
    version = ifelse(length(version) > 0, version, NA),
    author = ifelse(length(author) > 0, author, NA),
    published = ifelse(length(published) > 0, published, NA),
    license = ifelse(length(license) > 0, license, NA),
    url = url  # Link zur Paketseite als Home-page
  )
}

# Funktion zum Herunterladen von Paketen und deren Abhängigkeiten
download_package <- function(package, dest_dir, success_df, error_log, package_no) {
  tryCatch({
    # Informationen zum Paket abrufen
    cran_info <- get_cran_package_info(package)
    
    # Paket und Abhängigkeiten herunterladen
    downloaded <- download.packages(pkgs = package, destdir = dest_dir, type = "source")
    dependencies <- tools::package_dependencies(package, db = available.packages(), which = "all")
    dependencies_list <- paste(unlist(dependencies[[package]]), collapse = ", ")
    
    # Erfolg melden
    success_entry <- data.frame(
      Name = package,  # Name des Pakets
      Version = cran_info$version,
      `Home-page` = paste0('<a href="', cran_info$url, '">', cran_info$url, '</a>'),
      Author = cran_info$author,
      License = cran_info$license,
      Requires = dependencies_list,
      Filename = basename(downloaded[,2]),
      Published = cran_info$published,
      stringsAsFactors = FALSE
    )
    return(success_entry)
  }, error = function(e) {
    # Fehler melden
    error_message <- sprintf("Fehler beim Herunterladen von Paket: %s\nFehlermeldung: %s\n\n", package, e$message)
    writeLines(error_message, error_log, sep = "\n", useBytes = TRUE)
    return(NULL)
  })
}

# Zähler für die Statistiken
total_packages <- 0
successful_requires_downloads <- 0
failed_downloads <- 0

# Initialisieren der Protokolldateien
requires_success_df <- data.frame(Name = character(), Version = character(), `Home-page` = character(), Author = character(), License = character(), Requires = character(), Filename = character(), Published = character(), stringsAsFactors = FALSE)

error_log <- file.path(logs_dir, "download_error.log")
writeLines("Fehlermeldungen:\n", error_log)

# Herunterladen der Pakete aus der CSV-Liste
for (i in seq_along(pakete)) {
  total_packages <- total_packages + 1
  cat(sprintf("Herunterladen des Pakets: %s\n", pakete[i]))
  success_entry <- download_package(pakete[i], requires_dir, requires_success_df, error_log, i)
  if (!is.null(success_entry)) {
    requires_success_df <- rbind(requires_success_df, success_entry)
    successful_requires_downloads <- successful_requires_downloads + 1
  } else {
    failed_downloads <- failed_downloads + 1
  }
}

# Anzahl der Dateien in den Verzeichnissen zählen
requires_files_count <- length(list.files(requires_dir, pattern = "\\.tar\\.gz$"))

# Statistiken schreiben
stat_log <- file.path(logs_dir, "download_stat.log")
stat_message <- sprintf("Gesamtzahl der Pakete: %d\n", total_packages)  # Ausgabe der Gesamtzahl der Pakete
writeLines(stat_message, stat_log, sep = "\n", useBytes = TRUE)

# HTML-Tabellen generieren und speichern
requires_success_html <- file.path(logs_dir, "download_requires_success.html")

if (nrow(requires_success_df) > 0) {
  html_requires_success <- htmlTable(requires_success_df,
                                     css.cell = "padding: 5px;",
                                     css.rgroup = c("background-color: #f2f2f2;", "background-color: #e6f7ff;"),  # Abwechselnde Hintergrundfarben
                                     rgroup = rep("", nrow(requires_success_df)),  # Keine doppelte Angabe der Paketnummer
                                     n.rgroup = rep(1, nrow(requires_success_df)),
                                     header = names(requires_success_df))  # Titeländerung
  write(html_requires_success, file = requires_success_html)
}
